----编码规范----
1、文件名，数据库相关表名，字段名等用下划线命名风格；代码中的类型名，方法名，变量名等统一用驼峰式命名风格
2、命名，无论是变量，函数，类还是文件，请命名前思考别人看的时候能不能理解
3、用英文，不要用拼音（英文是做技术人员的基础素养）。
4、每个函数不要超过50行，超过50行请思考怎样更好地设计和封装
5、每个目录下的目录或文件尽量不要超过10个，如果超过10个，请思考怎么更好地组织
6、尽量使用面向对象封装，少用工具类函数
7、目录名跟package name相同



--顶层目录介绍--
lib: 与项目无关的第三方库的封装，lib里边的内容可以用于其他项目
common: 当前项目共用的定义，库的二次封装或业务封装等等
biz: 业务编排层，向前端提供接口服务，每个biz就是一个应用（biz是business的缩写，源自愿聊）
    base: biz 共用的业务逻辑
    bix_xxx: 名为xxx的business应用
svc: 业务数据服务层，向biz提供数据服务（svc是service的简写，源自愿聊）
    base: svc 共用的业务逻辑
    svc_yyy: 名yyy的数据服务
doc：项目文档存放处，请用文本格式的文档，二进制文档的冲突无法解决。
script: 脚本
job: 消息，定时等任务处理


--微服务调用规范--
1、biz 可以调用任意的 svc 数据服务
2、svc 不可以互相调用，需要组合多个 svc 的业务逻辑应该放在 biz
3、若发现有需要 svc 调用 svc 的场景，请拉上所有后端同学一起讨论


--biz目录介绍--
controller: 应用接口层，主要职责是输入检查，输出封装，顶层业务逻辑的实现
logic：如果业务逻辑过于复杂，需要多封装一层，把封装放到logic目录
job: 一些 biz 内部的简单异步任务处理
调用规范：controller 调用 logic，logic 之间不能互相调用


--svc目录介绍--
controller: 数据服务接口层，主要职责是输入检查，输出封装，顶层数据服务的实现
logic: 如果数据服务逻辑过于复杂，需要多封装一层，把封装放到logic目录
model: 数据库的封装层，封装对应表的增删查改接口
cache: 数据缓存的封装层，封装缓存的增删查改接口
job: 一些 svc 内部的简单异步任务处理
调用规范：只允许 controller 调用 logic; (controller,logic) 调用 (model, cache)


--job目录介绍--
handler: 消息处理接口层，主要职责是输入检查，输出封装，顶层业务逻辑的实现
logic: 如果业务逻辑过于复杂，需要多封装一层，把封装放到logic目录
model: 数据库的封装层，封装对应表的增删查改接口
cache: 数据缓存的封装层，封装缓存的增删查改接口
调用规范：只允许 controller 调用 logic; (controller,logic) 调用 (model, cache)

